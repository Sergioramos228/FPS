//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""9856ddb8-a15c-47d2-9360-8a66e765d3c8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""52219c6a-618b-432e-bbbd-e32c47714cfd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""72fb4ff6-e59e-47ca-b8e7-f5b51876e112"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActivateItem"",
                    ""type"": ""Button"",
                    ""id"": ""08ac981c-dc8a-4b0a-9d4c-91418cd9f9a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickupItem"",
                    ""type"": ""Button"",
                    ""id"": ""0a730443-4231-4e35-ac8c-2b5287f8dca6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""74f65880-9fb0-42b3-bdcb-d49eb09d291b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2af13899-d836-4fb3-946a-3c93d270510d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7c4efcce-e287-46c7-95ae-f11e65e7018f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1fb12f92-0a97-4014-bc34-b721c7cce21b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4a2b4522-f205-48df-9051-2f532c0db12f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4f104357-b831-4142-8e3a-3ea652346b29"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5af7737-3441-41ba-96f7-ba67486f0a47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Stick"",
                    ""id"": ""165b5004-b141-4c33-b931-fd75a3afb644"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""42f22fe9-cce0-4702-b9dc-2e4bf0559028"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a225fc72-5f13-479d-9e6c-6d2df6016218"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f82a63b-8515-4983-9246-ccd9dd0ffa31"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""556b0866-762e-4427-bc78-97e937775976"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb837997-47af-4b2b-bb22-6e621f2d3200"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a491df85-40f4-473d-9a19-e0e8ba48d150"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c200a573-1631-4039-94d2-9b2e4981384c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ActivateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4850c26-7ca1-492f-b349-da9f34db83c9"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ActivateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84665ebd-c719-45ae-a8ab-afbd9331f835"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""PickupItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66205576-04a4-4dc4-a0fd-2c28be268d4d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PickupItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcb4bb3d-6a1b-447b-bdb5-50cb7cc2645b"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4a9f487-27ef-43c6-a670-38388eba134e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1311942-6e7d-4710-b29b-76ea5e29aaeb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3b51535-cf0d-4ae7-a941-fde595612289"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""78c14b38-93b6-44ff-b1d4-c12bc3ebdbd8"",
            ""actions"": [
                {
                    ""name"": ""TakeItem1"",
                    ""type"": ""Button"",
                    ""id"": ""d1ae2e17-cd4a-453b-bc35-566d2296a1f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeItem2"",
                    ""type"": ""Button"",
                    ""id"": ""6cbc0345-4b25-4af2-b1a6-e8cf05792ec7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeItem3"",
                    ""type"": ""Button"",
                    ""id"": ""52038ab2-4b01-4673-8356-a50e0d5b579b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeItem4"",
                    ""type"": ""Button"",
                    ""id"": ""9e4239c9-51ae-4b17-8180-87ea6f2e6c38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddItem"",
                    ""type"": ""Button"",
                    ""id"": ""dca23856-2353-4c64-9422-2dcff6c8181b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7a62e60-1948-4b84-8167-95e842a0a030"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TakeItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50d4f1ab-c32b-4f93-8e75-74341ffb163c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TakeItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""023aeeb0-22c2-467c-881f-2fc53a37e2c5"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TakeItem3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9251398c-7af1-4041-a928-eaa681de149f"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TakeItem4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""007cbaff-adfa-4092-b0c7-4064f191221d"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""AddItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ff53ea4b-156d-45e7-b999-be98ab0c8e5a"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""3d177f08-4720-43da-86b1-ce674818f84d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f893b67-46fd-49a4-86c9-c5f9bf235f2b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualSenseGamepadHID>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
        m_Character_Rotate = m_Character.FindAction("Rotate", throwIfNotFound: true);
        m_Character_ActivateItem = m_Character.FindAction("ActivateItem", throwIfNotFound: true);
        m_Character_PickupItem = m_Character.FindAction("PickupItem", throwIfNotFound: true);
        m_Character_DropItem = m_Character.FindAction("DropItem", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_TakeItem1 = m_Inventory.FindAction("TakeItem1", throwIfNotFound: true);
        m_Inventory_TakeItem2 = m_Inventory.FindAction("TakeItem2", throwIfNotFound: true);
        m_Inventory_TakeItem3 = m_Inventory.FindAction("TakeItem3", throwIfNotFound: true);
        m_Inventory_TakeItem4 = m_Inventory.FindAction("TakeItem4", throwIfNotFound: true);
        m_Inventory_AddItem = m_Inventory.FindAction("AddItem", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Exit = m_UI.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Move;
    private readonly InputAction m_Character_Rotate;
    private readonly InputAction m_Character_ActivateItem;
    private readonly InputAction m_Character_PickupItem;
    private readonly InputAction m_Character_DropItem;
    private readonly InputAction m_Character_Jump;
    public struct CharacterActions
    {
        private @NewControls m_Wrapper;
        public CharacterActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Character_Move;
        public InputAction @Rotate => m_Wrapper.m_Character_Rotate;
        public InputAction @ActivateItem => m_Wrapper.m_Character_ActivateItem;
        public InputAction @PickupItem => m_Wrapper.m_Character_PickupItem;
        public InputAction @DropItem => m_Wrapper.m_Character_DropItem;
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotate;
                @ActivateItem.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnActivateItem;
                @ActivateItem.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnActivateItem;
                @ActivateItem.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnActivateItem;
                @PickupItem.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickupItem;
                @PickupItem.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickupItem;
                @PickupItem.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickupItem;
                @DropItem.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDropItem;
                @DropItem.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDropItem;
                @DropItem.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDropItem;
                @Jump.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @ActivateItem.started += instance.OnActivateItem;
                @ActivateItem.performed += instance.OnActivateItem;
                @ActivateItem.canceled += instance.OnActivateItem;
                @PickupItem.started += instance.OnPickupItem;
                @PickupItem.performed += instance.OnPickupItem;
                @PickupItem.canceled += instance.OnPickupItem;
                @DropItem.started += instance.OnDropItem;
                @DropItem.performed += instance.OnDropItem;
                @DropItem.canceled += instance.OnDropItem;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_TakeItem1;
    private readonly InputAction m_Inventory_TakeItem2;
    private readonly InputAction m_Inventory_TakeItem3;
    private readonly InputAction m_Inventory_TakeItem4;
    private readonly InputAction m_Inventory_AddItem;
    public struct InventoryActions
    {
        private @NewControls m_Wrapper;
        public InventoryActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakeItem1 => m_Wrapper.m_Inventory_TakeItem1;
        public InputAction @TakeItem2 => m_Wrapper.m_Inventory_TakeItem2;
        public InputAction @TakeItem3 => m_Wrapper.m_Inventory_TakeItem3;
        public InputAction @TakeItem4 => m_Wrapper.m_Inventory_TakeItem4;
        public InputAction @AddItem => m_Wrapper.m_Inventory_AddItem;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @TakeItem1.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem1;
                @TakeItem1.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem1;
                @TakeItem1.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem1;
                @TakeItem2.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem2;
                @TakeItem2.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem2;
                @TakeItem2.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem2;
                @TakeItem3.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem3;
                @TakeItem3.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem3;
                @TakeItem3.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem3;
                @TakeItem4.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem4;
                @TakeItem4.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem4;
                @TakeItem4.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnTakeItem4;
                @AddItem.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnAddItem;
                @AddItem.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnAddItem;
                @AddItem.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnAddItem;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TakeItem1.started += instance.OnTakeItem1;
                @TakeItem1.performed += instance.OnTakeItem1;
                @TakeItem1.canceled += instance.OnTakeItem1;
                @TakeItem2.started += instance.OnTakeItem2;
                @TakeItem2.performed += instance.OnTakeItem2;
                @TakeItem2.canceled += instance.OnTakeItem2;
                @TakeItem3.started += instance.OnTakeItem3;
                @TakeItem3.performed += instance.OnTakeItem3;
                @TakeItem3.canceled += instance.OnTakeItem3;
                @TakeItem4.started += instance.OnTakeItem4;
                @TakeItem4.performed += instance.OnTakeItem4;
                @TakeItem4.canceled += instance.OnTakeItem4;
                @AddItem.started += instance.OnAddItem;
                @AddItem.performed += instance.OnAddItem;
                @AddItem.canceled += instance.OnAddItem;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Exit;
    public struct UIActions
    {
        private @NewControls m_Wrapper;
        public UIActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_UI_Exit;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Exit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnActivateItem(InputAction.CallbackContext context);
        void OnPickupItem(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnTakeItem1(InputAction.CallbackContext context);
        void OnTakeItem2(InputAction.CallbackContext context);
        void OnTakeItem3(InputAction.CallbackContext context);
        void OnTakeItem4(InputAction.CallbackContext context);
        void OnAddItem(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
